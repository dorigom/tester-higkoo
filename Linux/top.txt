1. us -> User CPU time: The time the CPU has spent running users’ processes that are not niced.
2. sy -> System CPU time: The time the CPU has spent running the kernel and its processes.
3. ni -> Nice CPU time: The time the CPU has spent running users’ proccess that have been niced.
4. wa -> iowait: Amount of time the CPU has been waiting for I/O to complete.
5. hi -> Hardware IRQ: The amount of time the CPU has been servicing hardware interrupts.
6. si -> Software Interrupts.: The amount of time the CPU has been servicing software interrupts.
通过执行linux下top命令实现，但是这种方法不适合频繁调用

1、原理
（1）   CPU利用率
    在Linux下，CPU利用率分为用户态，系统态和空闲态，分别表示CPU处于用户态执行的时间，系统内核执行的时间，和空闲系统进程执行的时间，三者之和就是CPU的总时间，当没有用户进程、系统进程等需要执行的时候，CPU就执行系统缺省的空闲进程。从平常的思维方式理解的话，CPU的利用率就是非空闲进程占用时间的比例，即CPU执行非空闲进程的时间 / CPU总的执行时间。
    在Linux系统中，CPU时间的分配信息保存在/proc/stat文件中，利用率的计算应该从这个文件中获取数据。文件的头几行记录了每个CPU的用户态，系统态，空闲态等状态下分配的时间片（单位是Jiffies），这些数据是从CPU加电到当前的累计值。常用的监控软件就是利用/proc/stat里面的这些数据来计算CPU的利用率的。

    不同版本的linux /proc/stat文件内容不一样，以Linux 2.6来说，/proc/stat文件的内容如下：

cpu 2032004 102648 238344 167130733 758440 15159 17878 0
cpu0 1022597 63462 141826 83528451 366530 9362 15386 0
cpu1 1009407 39185 96518 83602282 391909 5796 2492 0
intr 303194010 212852371 3 0 0 11 0 0 2 1 1 0 0 3 0 11097365 0 72615114 6628960 0 179 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
ctxt 236095529
btime 1195210746
processes 401389
procs_running 1
procs_blocked 0
第一行的数值表示的是CPU总的使用情况，所以我们只要用第一行的数字计算就可以了。下表解析第一行各数值的含义：
参数	解析（单位：jiffies）
user (2032004)	从系统启动开始累计到当前时刻，用户态的CPU时间，不包含 nice值为负进程。
nice (102648)	从系统启动开始累计到当前时刻，nice值为负的进程所占用的CPU时间
system (238344)	从系统启动开始累计到当前时刻，核心时间
idle (167130733)	从系统启动开始累计到当前时刻，除硬盘IO等待时间以外其它等待时间
iowait (758440)	从系统启动开始累计到当前时刻，硬盘IO等待时间
irq (15159)	从系统启动开始累计到当前时刻，硬中断时间
softirq (17878)	从系统启动开始累计到当前时刻，软中断时间

与使用top命令的结果Cpu(s): 52.0% us,  1.3% sy,  0.0% ni, 44.0% id,  1.7% wa,  0.5% hi,  0.5% si 相对应
因为/proc/stat中的数值都是从系统启动开始累计到当前时刻的积累值，所以需要在不同时间点t1和t2取值进行比较运算，当两个时间点的间隔较短时，就可以把这个计算结果看作是CPU的即时利用率。
CPU的即时利用率的计算公式：
CPU在t1到t2时间段总的使用时间 = ( user2+ nice2+ system2+ idle2+ iowait2+ irq2+ softirq2) - ( user1+ nice1+ system1+ idle1+ iowait1+ irq1+ softirq1)
CPU在t1到t2时间段空闲使用时间 = (idle2 - idle1)
CPU在t1到t2时间段即时利用率 =  1 - CPU空闲使用时间 / CPU总的使用时间

（2）内存利用率
计算内存利用率需要从/proc/meminfo文件中取相应数据，文件内容如下：
MemTotal:      1024008 kB
MemFree:         18448 kB
Buffers:         12664 kB
Cached:         282500 kB
SwapCached:        716 kB
Active:         816124 kB
Inactive:        52516 kB
HighTotal:      122500 kB
HighFree:          304 kB

MemTotal数值表示内存总量，MemFree数值表示空余数量。
所以内存的即时利用率计算公式：
(MemTotal - MemFree)/ MemTotal









top -bd 5 > top.txt 
cat top.txt | grep load | grep average | awk '{ print $12 $13 $14 }' | tr ',' ' ' | nl -i 5 > load.txt
 
top -bd 1 -n 60 > /tmp/top.txt
grep ^Cpu /tmp/top.txt | awk '{print $5}' | awk -F% '{print $1}' | nl > /tmp/cpu.txt
grep ^Mem /tmp/top.txt | awk '{print $4}' | awk -Fk '{print $1}' | nl > /tmp/mem.txt
 
 
a PID 进程id 
b PPID 父进程id 
c RUSER Real user name 
d UID 进程所有者的用户id 
e USER 进程所有者的用户名 
f GROUP 进程所有者的组名 
g TTY 启动进程的终端名。不是从终端启动的进程则显示为 ? 
h PR 优先级 
i NI nice值。负值表示高优先级，正值表示低优先级 
j P 最后使用的CPU，仅在多CPU环境下有意义 
k %CPU 上次更新到现在的CPU时间占用百分比 
l TIME 进程使用的CPU时间总计，单位秒 
m TIME+ 进程使用的CPU时间总计，单位1/100秒 
n %MEM 进程使用的物理内存百分比 
o VIRT 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES 
p SWAP 进程使用的虚拟内存中，被换出的大小，单位kb。 
q RES 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA 
r CODE 可执行代码占用的物理内存大小，单位kb 
s DATA 可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb 
t SHR 共享内存大小，单位kb 
u nFLT 页面错误次数 
v nDRT 最后一次写入到现在，被修改过的页面数。 
w S 进程状态。 
D=不可中断的睡眠状态 
R=运行 
S=睡眠 
T=跟踪/停止 
Z=僵尸进程 
x COMMAND 命令名/命令行 
y WCHAN 若该进程在睡眠，则显示睡眠中的系统函数名 
z Flags 任务标志，参考 sched.h 
 